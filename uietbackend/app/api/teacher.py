# app/api/teacher.py
from fastapi import APIRouter, HTTPException
from datetime import datetime, timedelta
from app.db.database import otps, attendance, approved_teachers, approved_students
from app.core.config import SUBJECTS
from app.utils.otp_utils import generate_otp
from fastapi.responses import StreamingResponse
import csv
from io import StringIO
from datetime import datetime
from pydantic import BaseModel

class GenerateOtpRequest(BaseModel):
    employee_id: str
    subject: str
    duration_minutes: int


router = APIRouter()

@router.post("/teacher/generate-otp")
def generate_otp_route(data: GenerateOtpRequest):
    if data.subject not in SUBJECTS:
        raise HTTPException(status_code=400, detail="Invalid subject")
    
    teacher = approved_teachers.find_one({"employee_id": data.employee_id.upper()})
    if not teacher:
        raise HTTPException(status_code=404, detail="Teacher not found")

    otp = generate_otp()
    now = datetime.utcnow() 
    end_time = now + timedelta(minutes=data.duration_minutes + 337) 

    otps.insert_one({
        "otp": otp,
        "subject": data.subject,
        "teacher_id": data.employee_id.upper(),
        "start_time": now ,
        "end_time": end_time
    })
    return {"otp": otp, "subject": data.subject, "valid_till": end_time}

@router.get("/teacher/view-attendance/{employee_id}")
def view_attendance(employee_id: str):
    teacher = approved_teachers.find_one({"employee_id": employee_id.upper()})
    if not teacher:
        raise HTTPException(status_code=404, detail="Teacher not found")

    # Fetch all OTPs generated by this teacher
    otps_list = list(otps.find({"teacher_id": employee_id.upper()}))
    otp_codes = [o["otp"] for o in otps_list]

    # Find attendance records matching these OTPs
    records = list(attendance.find({"otp": {"$in": otp_codes}}))
    
    result = [
        {
            "student_name": r.get("student_name"),
            "roll_no": r.get("roll_no"),
            "subject": r.get("subject"),
            "marked_at": r.get("marked_at")
        }
        for r in records
    ]
    return result

@router.get("/teacher/export-attendance/{employee_id}")
def export_attendance(employee_id: str):
    # Find OTPs generated by this teacher
    otps_list = list(otps.find({"teacher_id": employee_id.upper()}))
    otp_codes = [otp["otp"] for otp in otps_list]

    # Find attendance records matching these OTPs
    records = list(attendance.find({"otp": {"$in": otp_codes}}))

    # Prepare CSV in memory
    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(["Student Name", "Roll Number", "Subject", "Date/Time"])

    for record in records:
        student = approved_students.find_one({"roll_no": record["roll_no"]})
        name = student["full_name"] if student else "Unknown"
        roll_no = record["roll_no"]
        subject = record["subject"]
        # If timestamp field is called 'marked_at', otherwise adjust
        dt = record.get("marked_at", datetime.utcnow()).strftime("%Y-%m-%d %H:%M:%S")
        writer.writerow([name, roll_no, subject, dt])

    output.seek(0)

    filename = f"attendance_{employee_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    return StreamingResponse(
        output,
        media_type="text/csv",
        headers={"Content-Disposition": f"attachment; filename={filename}"}
    )
